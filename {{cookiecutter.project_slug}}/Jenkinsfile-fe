pipeline {
    agent any
    environment {
        S3_BUCKET="projects-divami-deployments"
        CLOUDFRONT_DISTRIBUTION="E2O0OZR2Y3G6XE"
        LINK="https://project.divami.com/{{cookiecutter.project_slug}}"
        GOOGLE_CHAT_LINK="https://chat.googleapis.com/v1/spaces/AAAAdtA0kaI/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=UH4Advudj0TXbQhfbLQP60Bmz2d2hXRqqtIR6raO4LQ"
    }
    stages {
        stage('Install Dependencies and Generate the build file') {
            steps {
                sh 'python3 -m venv venv && . venv/bin/activate && pip install -r requirements/docs.txt && mkdocs build'
            }
        }
        stage('Upload to S3') {
            steps {
                sh "mv site/ {{cookiecutter.project_slug}}/"
                sh "aws s3 cp ./{{cookiecutter.project_slug}}/ s3://${S3_BUCKET}/{{cookiecutter.project_slug}} --recursive"
            }
        }
        stage('Invalidate CloudFront Cache') {
            steps {
                sh "aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION} --paths '/*'"
            }
        }
    }
    post {
        always { 
            script{
                def message = "Project Name: ${JOB_NAME}\n" +
                                "Build Number: ${BUILD_NUMBER}\n" +
                                "Git Branch: ${GIT_BRANCH}\n"
        
                def buildResult = currentBuild.currentResult
                if (buildResult == "SUCCESS") {
                    message +=  "Output: ${LINK}\n" +
                                "Build Result: Success"
                } 
                else {
                    message += "Output Log: ${RUN_DISPLAY_URL}\n" +
                                "Build Result: Failed"
                }
                googlechatnotification message: message, url: "${GOOGLE_CHAT_LINK}"
                cleanWs()
            }
        }
    }
}